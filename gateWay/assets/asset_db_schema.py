# -*- coding : utf-8 -*-
# Copyright 2015 Quantopian, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sqlalchemy as sa

# Define a version number for the database generated by these writers
# Increment this version number any time a change is made to the schema of the
# assets database
# NOTE: When upgrading this remember to add a downgrade in:
# .asset_db_migrations
ASSET_DB_VERSION = 7

# A frozenset of the names of all tables in the assets db
# NOTE: When modifying this schema, update the ASSET_DB_VERSION value
asset_db_table_names = frozenset([
                            'asset_router',
                            'equity_supplementary',
                            'convertible_supplementary',
                            'con_exchange',
                            'version_info',
                                ])

metadata = sa.MetaData()

asset_router = sa.Table(
    'asset_router',
    metadata,
    sa.Column(
        'id',
        sa.Integer,
        autoincrement=True
    ),
    sa.Column(
        'sid',
        sa.Integer,
        unique=True,
        nullable=False,
        primary_key=True,
        index=True
    ),

    sa.Column(
        'asset_name',
        sa.String(6),
        unique=True,
        nullable=False
    ),
    sa.Column(
        'asset_type',
        sa.String(10),
        nullable= False
    ),
    sa.Column(
        'exchange',
        sa.String(6)
    ),
    sa.Column(
        'first_traded',
        sa.String(16),
        nullable= False
    ),
    sa.Column(
        'last_traded',
        sa.String(10),
    ),
    sa.Column('country_code',
              sa.String(6),
              default='CH'
              ),

)

equity_basics = sa.Table(
    'equity_basics',
    metadata,
    sa.Column(
        'sid',
        sa.Integer,
        sa.ForeignKey(asset_router.c.sid),
        nullable=False,
        primary_key=True
    ),
    sa.Table(
        'dual',
        sa.String(5),
    ),
    sa.Column(
        'broker',
        sa.Text,
        nullable=False
    ),
    sa.Column(
        'district',
        sa.Text,
        nullable=False
    ),
    sa.Column(
        'initial_price',
        sa.Numeric(10, 2),
        nullable=False
    ),
    sa.Column(
        'business_scope',
        sa.String(6),
        nullable=False
    ),
)

convertible_basics = sa.Table(
    'convertible_basics',
    metadata,
    sa.Column(
        'sid',
        sa.Integer,
        sa.ForeignKey(asset_router.c.sid),
        unique = True,
        nullable = False,
        primary_key = True,
        index = True
    ),
    sa.Column(
        # 股票可以发行不止一个可转债
        'swap_code',
        sa.String(6),
        # unique=True,
        nullable=False,
        primary_key=True
    ),
    sa.Column(
        'put_price',
        sa.Numeric(10, 3),
        nullable = False
    ),
    sa.Column(
        'redeem_price',
        sa.Numeric(10, 2),
        nullable=False
    ),
    sa.Column(
        'convert_price',
        sa.Numeric(10, 2),
        nullable=False
    ),
    sa.Column(
        'convert_dt',
        sa.String(10),
        nullable=False
    ),
    sa.Column(
        'put_convert_price',
        sa.Numeric(10, 2),
        nullable=False
    ),
    sa.Column(
        'guarantor',
        sa.Text,
        nullable=False
    ),
)


version_info = sa.Table(
    'version_info',
    metadata,
    sa.Column(
        'id',
        sa.Integer,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column(
        'version',
        sa.Integer,
        unique=True,
        nullable=False,
    ),
    # This constraint ensures a single entry in this table
    sa.CheckConstraint('id <= 1'),
)
